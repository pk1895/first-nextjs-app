{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\Prasad\\\\DEV\\\\NextJS\\\\first-next-app\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient } from 'mongodb';\n\nfunction MeetupDetails(props) {\n  console.log(props.meetupData);\n  debugger;\n  const {\n    id,\n    title,\n    address,\n    description,\n    image\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    id: id,\n    image: image,\n    title: title,\n    address: address,\n    description: description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://prasad:qWDZu87DMoRSXDsy@cluster0.fhxsb.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const collection = db.collection('meetups');\n  const meetups = await collection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(el => ({\n      params: {\n        meetupId: el._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  const client = await MongoClient.connect('mongodb+srv://prasad:qWDZu87DMoRSXDsy@cluster0.fhxsb.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const collection = db.collection('meetups');\n  const meetupSelected = await collection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: meetupSelected\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["F:/Prasad/DEV/NextJS/first-next-app/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","MeetupDetails","props","console","log","meetupData","id","title","address","description","image","getStaticPaths","client","connect","db","collection","meetups","find","_id","toArray","close","fallback","paths","map","el","params","meetupId","toString","getStaticProps","context","meetupSelected","findOne"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,UAAlB;AACA;AACA,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,WAAtB;AAAmCC,IAAAA;AAAnC,MAA6CR,KAAnD;AACA,sBACI,QAAC,YAAD;AACI,IAAA,EAAE,EAAEI,EADR;AAEI,IAAA,KAAK,EAAEI,KAFX;AAGI,IAAA,KAAK,EAAEH,KAHX;AAII,IAAA,OAAO,EAAEC,OAJb;AAKI,IAAA,WAAW,EAAEC;AALjB;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;AAED,OAAO,eAAeE,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACjB,sGADiB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,UAAU,GAAGD,EAAE,CAACC,UAAH,CAAc,SAAd,CAAnB;AAEA,QAAMC,OAAO,GAAG,MAAMD,UAAU,CAACE,IAAX,CAAgB,EAAhB,EAAoB;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAApB,EAAgCC,OAAhC,EAAtB;AACAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,EAAE,KAChB;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,EAAE,CAACN,GAAH,CAAOS,QAAP;AAAZ;AAAV,KADgB,CAAd;AAFJ,GAAP;AAMH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACAvB,EAAAA,OAAO,CAACC,GAAR,CAAYsB,QAAZ;AAEA,QAAMd,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACjB,sGADiB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,UAAU,GAAGD,EAAE,CAACC,UAAH,CAAc,SAAd,CAAnB;AAEA,QAAMe,cAAc,GAAG,MAAMf,UAAU,CAACgB,OAAX,CAAmB;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GAAnB,CAA7B;AACAd,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACHlB,IAAAA,KAAK,EAAE;AACHG,MAAAA,UAAU,EAAEyB;AADT;AADJ,GAAP;AAMH;AAED,eAAe7B,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nfunction MeetupDetails(props) {\r\n    console.log(props.meetupData);\r\n    debugger\r\n    const { id, title, address, description, image } = props;\r\n    return (\r\n        <MeetupDetail\r\n            id={id}\r\n            image={image}\r\n            title={title}\r\n            address={address}\r\n            description={description} />\r\n\r\n    );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n    const client = await MongoClient.connect(\r\n        'mongodb+srv://prasad:qWDZu87DMoRSXDsy@cluster0.fhxsb.mongodb.net/meetups?retryWrites=true&w=majority'\r\n    );\r\n\r\n    const db = client.db();\r\n    const collection = db.collection('meetups');\r\n\r\n    const meetups = await collection.find({}, { _id: 1 }).toArray();\r\n    client.close();\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetups.map(el =>\r\n            ({ params: { meetupId: el._id.toString() } }))\r\n\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    const meetupId = context.params.meetupId;\r\n    console.log(meetupId);\r\n\r\n    const client = await MongoClient.connect(\r\n        'mongodb+srv://prasad:qWDZu87DMoRSXDsy@cluster0.fhxsb.mongodb.net/meetups?retryWrites=true&w=majority'\r\n    );\r\n\r\n    const db = client.db();\r\n    const collection = db.collection('meetups');\r\n\r\n    const meetupSelected = await collection.findOne({ _id: meetupId });\r\n    client.close();\r\n\r\n    return {\r\n        props: {\r\n            meetupData: meetupSelected\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}